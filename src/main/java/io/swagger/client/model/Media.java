/*
 * API whatsgate.ru
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Media
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-09-07T09:16:17.666Z[GMT]")
public class Media {
  /**
   * Mime type of file
   */
  @JsonAdapter(MimetypeEnum.Adapter.class)
  public enum MimetypeEnum {
    APPLICATION_OGG("application/ogg"),
    APPLICATION_PDF("application/pdf"),
    APPLICATION_ZIP("application/zip"),
    APPLICATION_GZIP("application/gzip"),
    APPLICATION_MSWORD("application/msword"),
    AUDIO_MP4("audio/mp4"),
    AUDIO_AAC("audio/aac"),
    AUDIO_MPEG("audio/mpeg"),
    AUDIO_OGG("audio/ogg"),
    AUDIO_WEBM("audio/webm"),
    IMAGE_GIF("image/gif"),
    IMAGE_JPEG("image/jpeg"),
    IMAGE_PJPEG("image/pjpeg"),
    IMAGE_PNG("image/png"),
    IMAGE_SVG_XML("image/svg+xml"),
    IMAGE_TIFF("image/tiff"),
    IMAGE_WEBP("image/webp"),
    VIDEO_MPEG("video/mpeg"),
    VIDEO_MP4("video/mp4"),
    VIDEO_OGG("video/ogg"),
    VIDEO_QUICKTIME("video/quicktime"),
    VIDEO_WEBM("video/webm"),
    VIDEO_X_MS_WMV("video/x-ms-wmv"),
    VIDEO_X_FLV("video/x-flv"),
    APPLICATION_VND_MS_EXCEL("application/vnd.ms-excel"),
    APPLICATION_VND_MS_POWERPOINT("application/vnd.ms-powerpoint"),
    APPLICATION_MSWORD_26("application/msword");

    private String value;

    MimetypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MimetypeEnum fromValue(String input) {
      for (MimetypeEnum b : MimetypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MimetypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MimetypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MimetypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MimetypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("mimetype")
  private MimetypeEnum mimetype = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("filename")
  private String filename = null;

  public Media mimetype(MimetypeEnum mimetype) {
    this.mimetype = mimetype;
    return this;
  }

   /**
   * Mime type of file
   * @return mimetype
  **/
  @Schema(required = true, description = "Mime type of file")
  public MimetypeEnum getMimetype() {
    return mimetype;
  }

  public void setMimetype(MimetypeEnum mimetype) {
    this.mimetype = mimetype;
  }

  public Media data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Base64 encoded data file body
   * @return data
  **/
  @Schema(required = true, description = "Base64 encoded data file body")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public Media filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * Name of the file
   * @return filename
  **/
  @Schema(required = true, description = "Name of the file")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Media media = (Media) o;
    return Objects.equals(this.mimetype, media.mimetype) &&
        Objects.equals(this.data, media.data) &&
        Objects.equals(this.filename, media.filename);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mimetype, data, filename);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Media {\n");
    
    sb.append("    mimetype: ").append(toIndentedString(mimetype)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
