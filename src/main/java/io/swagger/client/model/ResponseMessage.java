/*
 * API whatsgate.ru
 * Интерфейс для взаимодействия с клиентом Whatsapp
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ResponseMessage
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-09-07T09:16:17.666Z[GMT]")
public class ResponseMessage implements OneOfinlineResponse200Result {
  @SerializedName("id")
  private String id = null;

  @SerializedName("ack")
  private Integer ack = null;

  @SerializedName("hasMedia")
  private Boolean hasMedia = null;

  @SerializedName("mediaKey")
  private String mediaKey = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("timestamp")
  private Integer timestamp = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("isForwarded")
  private Boolean isForwarded = null;

  public ResponseMessage id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Идентификатор сообщения
   * @return id
  **/
  @Schema(description = "Идентификатор сообщения")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ResponseMessage ack(Integer ack) {
    this.ack = ack;
    return this;
  }

   /**
   * Флаг просмотра сообщения
   * @return ack
  **/
  @Schema(description = "Флаг просмотра сообщения")
  public Integer getAck() {
    return ack;
  }

  public void setAck(Integer ack) {
    this.ack = ack;
  }

  public ResponseMessage hasMedia(Boolean hasMedia) {
    this.hasMedia = hasMedia;
    return this;
  }

   /**
   * Флаг, имеет ли сообщение медиафайл
   * @return hasMedia
  **/
  @Schema(description = "Флаг, имеет ли сообщение медиафайл")
  public Boolean isHasMedia() {
    return hasMedia;
  }

  public void setHasMedia(Boolean hasMedia) {
    this.hasMedia = hasMedia;
  }

  public ResponseMessage mediaKey(String mediaKey) {
    this.mediaKey = mediaKey;
    return this;
  }

   /**
   * Ключ медиафайла (при наличии)
   * @return mediaKey
  **/
  @Schema(description = "Ключ медиафайла (при наличии)")
  public String getMediaKey() {
    return mediaKey;
  }

  public void setMediaKey(String mediaKey) {
    this.mediaKey = mediaKey;
  }

  public ResponseMessage body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Текст сообщения
   * @return body
  **/
  @Schema(description = "Текст сообщения")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public ResponseMessage type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Тип сообщения
   * @return type
  **/
  @Schema(description = "Тип сообщения")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ResponseMessage timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Время сообщения в формате Unix Timestamp
   * @return timestamp
  **/
  @Schema(description = "Время сообщения в формате Unix Timestamp")
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }

  public ResponseMessage from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Идентификатор отправителя в формате WhatsApp
   * @return from
  **/
  @Schema(description = "Идентификатор отправителя в формате WhatsApp")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public ResponseMessage to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Идентификатор получателя в формате WhatsApp
   * @return to
  **/
  @Schema(description = "Идентификатор получателя в формате WhatsApp")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public ResponseMessage isForwarded(Boolean isForwarded) {
    this.isForwarded = isForwarded;
    return this;
  }

   /**
   * Флаг, было ли сообщение перенаправлено
   * @return isForwarded
  **/
  @Schema(description = "Флаг, было ли сообщение перенаправлено")
  public Boolean isIsForwarded() {
    return isForwarded;
  }

  public void setIsForwarded(Boolean isForwarded) {
    this.isForwarded = isForwarded;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseMessage responseMessage = (ResponseMessage) o;
    return Objects.equals(this.id, responseMessage.id) &&
        Objects.equals(this.ack, responseMessage.ack) &&
        Objects.equals(this.hasMedia, responseMessage.hasMedia) &&
        Objects.equals(this.mediaKey, responseMessage.mediaKey) &&
        Objects.equals(this.body, responseMessage.body) &&
        Objects.equals(this.type, responseMessage.type) &&
        Objects.equals(this.timestamp, responseMessage.timestamp) &&
        Objects.equals(this.from, responseMessage.from) &&
        Objects.equals(this.to, responseMessage.to) &&
        Objects.equals(this.isForwarded, responseMessage.isForwarded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ack, hasMedia, mediaKey, body, type, timestamp, from, to, isForwarded);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseMessage {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ack: ").append(toIndentedString(ack)).append("\n");
    sb.append("    hasMedia: ").append(toIndentedString(hasMedia)).append("\n");
    sb.append("    mediaKey: ").append(toIndentedString(mediaKey)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    isForwarded: ").append(toIndentedString(isForwarded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
